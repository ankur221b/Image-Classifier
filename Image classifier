{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Gi3jR4-lg4T4"
   },
   "source": [
    "# **IMPORT DEPENDENCIES**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qcz1gg0b7pFw"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import keras\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zIZnafUQ8TCl"
   },
   "outputs": [],
   "source": [
    "# reading datasets, can use mnist dataset inbuilt in keras\n",
    "\n",
    "train = pd.read_csv('train.csv')\n",
    "test = pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "fJkMNN3995H8"
   },
   "outputs": [],
   "source": [
    "# converting pandas dataframe to numpy arrays\n",
    "\n",
    "Y = train['label'].values\n",
    "X = train.drop('label',axis=1).values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "gXMwwgU--I0S",
    "outputId": "da24059b-3b40-4083-d6d3-59fc3db9e1b6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000,)\n",
      "(42000, 784)\n"
     ]
    }
   ],
   "source": [
    "# Normalising image pixels between 0 to 1\n",
    "\n",
    "X = X/255\n",
    "print(Y.shape)\n",
    "print(X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "UsoVKvbN-fKv",
    "outputId": "ffabe9f0-df32-4f21-c525-3e27fa6ea20e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000,)"
      ]
     },
     "execution_count": 28,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reshaping the image \n",
    "\n",
    "X = X.reshape(X.shape[0],28,28,1)\n",
    "Y.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "fR8w_4H9-nfP"
   },
   "outputs": [],
   "source": [
    "# One hot encoding \n",
    "\n",
    "Y = keras.utils.to_categorical(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VvF7XzpP_JRx"
   },
   "outputs": [],
   "source": [
    "# Splitting data into training and testing data\n",
    "\n",
    "train_X,test_X,train_Y,test_Y = train_test_split(X, Y, test_size = 0.2, random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "brG06My_vjLs"
   },
   "source": [
    "# **BUILDING THE MODEL**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "oDBmlxZNADaL"
   },
   "outputs": [],
   "source": [
    "# Model building\n",
    "\n",
    "def make_model():\n",
    "  model = keras.Sequential()\n",
    "  \n",
    "  #convolutional layer with rectified linear unit activation\n",
    "  model.add(keras.layers.Conv2D(32, (3,3), input_shape = (28,28,1), activation = 'relu' ) ) #32 filters each of size (3,3)\n",
    "\n",
    "  model.add(keras.layers.Conv2D(64, (3,3), activation = 'relu' ) ) #64 filters each of size (3,3)\n",
    "  \n",
    "  #pooling layer \n",
    "  model.add(keras.layers.MaxPooling2D( pool_size = (2,2) ) )\n",
    "  \n",
    "  # randomly switching off and on neurons to improve convergence\n",
    "  model.add(keras.layers.Dropout(0.33))\n",
    "  \n",
    "  # fully connected neural network\n",
    "  model.add(keras.layers.Flatten())\n",
    "  model.add(keras.layers.Dense(128, activation='relu'))\n",
    "  \n",
    "  model.add(keras.layers.Dropout(0.5))\n",
    "  \n",
    "  # converting matrix into probabalities using softmax activation\n",
    "  model.add(keras.layers.Dense(10, activation='softmax'))\n",
    "  \n",
    "  model.compile( optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'] )\n",
    "  \n",
    "  return model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "EZPlWZXbwCt4"
   },
   "source": [
    "# **TRAINING AND EVALUATING MODEL**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 874
    },
    "colab_type": "code",
    "id": "Pfxnqm_ICIPe",
    "outputId": "4b31516e-d840-4cce-cc16-067a3b2791c0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 33600 samples, validate on 8400 samples\n",
      "Epoch 1/25\n",
      "33600/33600 [==============================] - 6s 179us/step - loss: 0.3983 - acc: 0.8768 - val_loss: 0.1014 - val_acc: 0.9712\n",
      "Epoch 2/25\n",
      "33600/33600 [==============================] - 5s 150us/step - loss: 0.1206 - acc: 0.9640 - val_loss: 0.0608 - val_acc: 0.9815\n",
      "Epoch 3/25\n",
      "33600/33600 [==============================] - 5s 150us/step - loss: 0.0862 - acc: 0.9742 - val_loss: 0.0533 - val_acc: 0.9839\n",
      "Epoch 4/25\n",
      "33600/33600 [==============================] - 5s 149us/step - loss: 0.0705 - acc: 0.9789 - val_loss: 0.0469 - val_acc: 0.9861\n",
      "Epoch 5/25\n",
      "33600/33600 [==============================] - 5s 148us/step - loss: 0.0626 - acc: 0.9805 - val_loss: 0.0388 - val_acc: 0.9875\n",
      "Epoch 6/25\n",
      "33600/33600 [==============================] - 5s 147us/step - loss: 0.0520 - acc: 0.9848 - val_loss: 0.0402 - val_acc: 0.9873\n",
      "Epoch 7/25\n",
      "33600/33600 [==============================] - 5s 147us/step - loss: 0.0468 - acc: 0.9848 - val_loss: 0.0363 - val_acc: 0.9881\n",
      "Epoch 8/25\n",
      "33600/33600 [==============================] - 5s 146us/step - loss: 0.0417 - acc: 0.9867 - val_loss: 0.0377 - val_acc: 0.9886\n",
      "Epoch 9/25\n",
      "33600/33600 [==============================] - 5s 147us/step - loss: 0.0365 - acc: 0.9878 - val_loss: 0.0372 - val_acc: 0.9901\n",
      "Epoch 10/25\n",
      "33600/33600 [==============================] - 5s 147us/step - loss: 0.0344 - acc: 0.9889 - val_loss: 0.0370 - val_acc: 0.9894\n",
      "Epoch 11/25\n",
      "33600/33600 [==============================] - 5s 148us/step - loss: 0.0329 - acc: 0.9894 - val_loss: 0.0419 - val_acc: 0.9882\n",
      "Epoch 12/25\n",
      "33600/33600 [==============================] - 5s 149us/step - loss: 0.0283 - acc: 0.9904 - val_loss: 0.0366 - val_acc: 0.9901\n",
      "Epoch 13/25\n",
      "33600/33600 [==============================] - 5s 151us/step - loss: 0.0289 - acc: 0.9904 - val_loss: 0.0375 - val_acc: 0.9898\n",
      "Epoch 14/25\n",
      "33600/33600 [==============================] - 5s 151us/step - loss: 0.0265 - acc: 0.9917 - val_loss: 0.0363 - val_acc: 0.9905\n",
      "Epoch 15/25\n",
      "33600/33600 [==============================] - 5s 151us/step - loss: 0.0238 - acc: 0.9926 - val_loss: 0.0325 - val_acc: 0.9906\n",
      "Epoch 16/25\n",
      "33600/33600 [==============================] - 5s 151us/step - loss: 0.0221 - acc: 0.9924 - val_loss: 0.0377 - val_acc: 0.9888\n",
      "Epoch 17/25\n",
      "33600/33600 [==============================] - 5s 151us/step - loss: 0.0213 - acc: 0.9932 - val_loss: 0.0365 - val_acc: 0.9899\n",
      "Epoch 18/25\n",
      "33600/33600 [==============================] - 5s 150us/step - loss: 0.0188 - acc: 0.9938 - val_loss: 0.0370 - val_acc: 0.9900\n",
      "Epoch 19/25\n",
      "33600/33600 [==============================] - 5s 152us/step - loss: 0.0201 - acc: 0.9931 - val_loss: 0.0387 - val_acc: 0.9913\n",
      "Epoch 20/25\n",
      "33600/33600 [==============================] - 5s 151us/step - loss: 0.0191 - acc: 0.9935 - val_loss: 0.0402 - val_acc: 0.9902\n",
      "Epoch 21/25\n",
      "33600/33600 [==============================] - 5s 150us/step - loss: 0.0196 - acc: 0.9934 - val_loss: 0.0381 - val_acc: 0.9905\n",
      "Epoch 22/25\n",
      "33600/33600 [==============================] - 5s 150us/step - loss: 0.0181 - acc: 0.9940 - val_loss: 0.0394 - val_acc: 0.9908\n",
      "Epoch 23/25\n",
      "33600/33600 [==============================] - 5s 151us/step - loss: 0.0174 - acc: 0.9942 - val_loss: 0.0413 - val_acc: 0.9899\n",
      "Epoch 24/25\n",
      "33600/33600 [==============================] - 5s 150us/step - loss: 0.0152 - acc: 0.9947 - val_loss: 0.0388 - val_acc: 0.9905\n",
      "Epoch 25/25\n",
      "33600/33600 [==============================] - 5s 152us/step - loss: 0.0143 - acc: 0.9953 - val_loss: 0.0362 - val_acc: 0.9913\n"
     ]
    }
   ],
   "source": [
    "model = make_model()\n",
    "\n",
    "log = model.fit(train_X, train_Y, batch_size=200, epochs = 25, verbose=1, validation_data = (test_X,test_Y)) # training the model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 84
    },
    "colab_type": "code",
    "id": "ndihqbzGwhwU",
    "outputId": "191a87e5-39ed-4554-c59d-f56ff9e88ceb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8400/8400 [==============================] - 1s 145us/step\n",
      "\n",
      "Accuracy: 0.9913095238095239 \n",
      " Error: 0.8690476190476204\n"
     ]
    }
   ],
   "source": [
    "scores = model.evaluate(test_X, test_Y, verbose=1) # evaluating the model\n",
    "\n",
    "print(\"\\nAccuracy: {} \\n Error: {}\".format(scores[1], 100-scores[1]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "S1Z_tVjY02mA"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Untitled.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
